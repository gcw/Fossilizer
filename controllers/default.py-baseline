# -*- coding: utf-8 -*- 
global auth
global crud
global db
global FOSSIL_BIN
global redirect
global request
global response
global service
global session
global T
global URL

#########################################################################
## This is a samples controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################
import os
import os.path

def index():
    """
    example action using the internationalization operator T and flash
    rendered by views/default/index.html or views/generic.html
    """
    #response.flash = T('Welcome to Fossilizer.')
    return dict(message=T('Welcome to Fossilizer'))

def user():
    """
    exposes:
    http://..../[app]/default/user/login 
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    return dict(form=auth())


def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request,db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    session.forget()
    return service()

@auth.requires_login()
def create():
    mechanism = request.args(0)
    if mechanism == 'upload':
        message = "Upload your Fossil"
        db.fossil.clone_url.writable=False
        db.fossil.clone_url.readable=False
        form = crud.create(db.fossil, onvalidation=upload_proc,
                            onaccept=upload_post_proc)
    elif mechanism == 'clone':
        message = "Clone an existing Fossil"
        #db.fossil.file.writable=False
        #db.fossil.file.readable=False
        form = "unimplemented"
        #form = crud.create(db.fossil, onvalidation=clone_proc, 
        #                    onaccept=clone_post_proc)
        response.flash = T('Not implemented')
    else:
        message = "Create a new fossil"
        db.fossil.file.writable=False
        db.fossil.file.readable=False
        db.fossil.clone_url.writable=False
        db.fossil.clone_url.readable=False
        form = crud.create(db.fossil, onvalidation=scratch_proc,
                            onaccept=scratch_post_proc)
    return dict(message=T(message), form=form)

def fossils():
    #mechanism = request.args(0)
    #if mechanism == "mine" and auth.user_id:
    #    message = db.auth_user[auth.user_id].user_handle+'\'s Fossils'
    #    fossils = db(db.fossil.owner==auth.user_id).select()
    #else:
    message = "Currently available fossils"
    public_fossils=db(db.fossil.visibility == True).select()
    my_fossils = db(db.fossil.owner==auth.user_id).select()
    return dict(message=message, public_fossils=public_fossils,
                my_fossils=my_fossils)

def fossil():
    #Function to display fossil entry
    fossil_id = request.args(0) or redirect(URL('index'))
    fossil_record = db.fossil(fossil_id) or redirect(URL('index'))
    #fossil_record = db(db.fossil.id==fossil_id).select().first()
    is_active = False
    if auth.user_id == fossil_record['owner']:
        is_active = os.path.exists(fossil_record.link_path)
        db.fossil.file.writable=False
        db.fossil.file.readable=True
        db.fossil.clone_url.writable=False
        db.fossil.clone_url.readable=False
        form=crud.update(db.fossil, fossil_id, )
        #crud.settings.update_ondelete = delete_proc(fossil_record.link_path)
        crud.settings.delete_onaccept = delete_proc
        if request.args(1) == "link":
            link_manage(fossil_record.file,
                        fossil_record.link_path,
                        fossil_record.user_index)
            redirect(URL(a='fossilizer',c='default',f='fossil',
                            args=[fossil_record.id]))
        if request.args(1) == "unlink":
            unlink_manage(fossil_record.link_path)
            redirect(URL(a='fossilizer',c='default',f='fossil',
                            args=[fossil_record.id]))
    else:
        db.fossil.file.readable=False
        if fossil_record.visibility:
            form=crud.read(db.fossil, fossil_id, )
        else:
            form=("nothing", "Here", "For", "you")
    return dict(message=T(fossil_record.project_name), form=form,
                fossil=fossil_record, is_active=is_active)

def link_manage(true_file, link_path, user_index):
    link_exists = os.path.islink(link_path)
    f=true_file.split('.')
    true_path=os.path.join(request.folder,'uploads',
                            '%s.%s'%(f[0],f[1]),
                            '%c%c'%(f[2][0],f[2][1]),
                            true_file
                            )
    if not os.path.isdir(os.path.dirname(link_path)):
        os.makedirs(os.path.dirname(link_path))
    if not os.path.islink(link_path):
        os.symlink(true_path, link_path)
    if not os.path.isdir(os.path.dirname(user_index)):
        os.makedirs(os.path.dirname(user_index))
    if not os.path.isfile(user_index):
        index_file = open(user_index, 'w')
        index_file.write('#!'+FOSSIL_BIN+'\n')
        index_file.write('directory: '+os.path.dirname(link_path)+'\n')
        index_file.write('notfound: '+URL('index')+'\n')
        index_file.close()
        os.chmod(user_index,0755)
    return True

def unlink_manage(link_path):
    if os.path.islink(link_path):
        os.unlink(link_path)
    

def delete_proc(form):
    unlink_manage(form.vars.link_path) #unlink file after removing fossil record
    return True
    
def upload_proc(form):
    form.vars.created_on = request.now #set time stamp properly
    fmarker = form.vars.file.file.read(15)
    form.vars.file.file.seek(0)         #reset the cursor in the file to 0
    if fmarker == 'SQLite format 3':
        pass
    else:
        form.errors.file = "This isn't a valid fossil file"
    return True

def upload_post_proc(form):
    true_file = str(form.vars.file_newfilename)
    link_path = str(db.fossil[form.vars.id].link_path)
    user_index = str(db.fossil[form.vars.id].user_index)
    visible = form.vars.visibility
    link_manage(true_file, link_path, user_index )
    return True

def clone_proc(form):
    form.vars.created_on = request.now #set time stamp properly
    return True

def clone_post_proc(form):
    return True

def scratch_proc(form):
    form.vars.created_on = request.now #set time stamp properly

def scratch_post_proc(form):
    return True
